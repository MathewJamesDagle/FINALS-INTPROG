{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map, finalize } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport { Rating } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/ratings`;\nexport let RatingService = /*#__PURE__*/(() => {\n  class RatingService {\n    router;\n    http;\n    ratingSubject;\n    rating;\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.ratingSubject = new BehaviorSubject(null);\n      this.rating = this.ratingSubject.asObservable();\n    }\n    get ratingValue() {\n      return this.ratingSubject.value;\n    }\n    getAll() {\n      return this.http.get(baseUrl);\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`);\n    }\n    create(params) {\n      return this.http.post(baseUrl, params);\n    }\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params).pipe(map(rating => {\n        // update the current account if it was updated\n        if (rating.id === this.ratingValue.id) {\n          // publish updated account to subscribers\n          rating = {\n            ...this.ratingValue,\n            ...rating\n          };\n          this.ratingSubject.next(Rating);\n        }\n        return Rating;\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`).pipe(finalize(() => {}));\n    }\n    static ɵfac = function RatingService_Factory(t) {\n      return new (t || RatingService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RatingService,\n      factory: RatingService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return RatingService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}