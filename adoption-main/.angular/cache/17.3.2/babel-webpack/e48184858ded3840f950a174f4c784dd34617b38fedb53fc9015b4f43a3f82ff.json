{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nlet EditStatusComponent = class EditStatusComponent {\n  formBuilder;\n  route;\n  router;\n  requestService;\n  alertService;\n  accountService;\n  petService;\n  form;\n  loading = false;\n  submitted = false;\n  requestId;\n  requests = [];\n  pets = [];\n  constructor(formBuilder, route, router, requestService, alertService, accountService, petService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.requestService = requestService;\n    this.alertService = alertService;\n    this.accountService = accountService;\n    this.petService = petService;\n  }\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      status: ['', Validators.required]\n    });\n    this.route.params.subscribe(params => {\n      this.requestId = params['id'];\n      this.loadRequest(this.requestId);\n    });\n  }\n  // Convenience getter for easy access to form fields\n  get f() {\n    return this.form.controls;\n  }\n  loadRequest(id) {\n    this.requestService.getRequests().pipe(first()).subscribe(requests => {\n      const request = requests.find(req => req.id === id);\n      if (!request) {\n        this.alertService.error('Request not found');\n        this.router.navigate(['/requests']); // Redirect to requests list if request not found\n        return;\n      }\n      this.petService.getById(request.petId).subscribe(pet => {\n        requests.pet = pet;\n      }, error => {\n        console.error('Error fetching pet details:', error);\n      });\n      this.accountService.getById(request.accountId).subscribe(user => {\n        request.user = user;\n      }, error => {\n        console.error('Error fetching user details:', error);\n      });\n      // Populate form fields with request details\n      this.requests = request;\n      this.form.patchValue({\n        status: request.status\n      });\n    }, error => {\n      this.alertService.error('Error loading request details');\n      this.router.navigate(['/requests']); // Redirect to requests list on error\n    });\n  }\n  onSubmit() {\n    this.submitted = true;\n    // Stop here if form is invalid\n    if (this.form.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.requestService.updateRequestStatus(this.request.id, this.f.status.value).pipe(first()).subscribe(() => {\n      this.alertService.success('Request status updated successfully', {\n        keepAfterRouteChange: true\n      });\n      this.router.navigate(['/requests']); // Redirect to requests list on success\n    }, error => {\n      this.alertService.error('Error updating request status');\n      this.loading = false;\n    });\n  }\n  onCancel() {\n    this.router.navigate(['/requests']); // Redirect to requests list on cancel\n  }\n};\nEditStatusComponent = __decorate([Component({\n  templateUrl: 'edit-status.component.html'\n})], EditStatusComponent);\nexport { EditStatusComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}